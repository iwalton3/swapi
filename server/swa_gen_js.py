from inspect import signature
import json

def gen_function(func, name, ignore_details, legacy=False):
    args = []
    call = []
    kw = ""
    rest = ""
    for argument in signature(func).parameters.values():
        if argument.name == "details" and ignore_details:
            continue
        elif argument.kind == argument.VAR_KEYWORD:
            args.append(argument.name + "={}")
            kw = f", {argument.name}"
        elif argument.kind == argument.VAR_POSITIONAL:
            args.append(f"{argument.name}=[]")
            call.append(f"...{argument.name}")
        elif argument.default != argument.empty:
            param = json.dumps(argument.default)
            args.append(f"{argument.name}={param}")
            call.append(argument.name)
        else:
            args.append(argument.name)
            call.append(argument.name)
    if call:
        rest += ", [" + ", ".join(call) + "]"
    if kw:
        rest += kw
    args = ", ".join(args)
    return "export function "+name+"("+args+") { return jsonRequest('"+name+"'"+rest+"); }"


js_lib = """/* 
 * This code was generated by a tool.
 */

const url = "{{url}}";
const jsonCT = new Headers();
jsonCT.append('Content-Type', 'application/json');

function jsonRequest(method, args=[], kwargs={}) {
    return new Promise((resolve, reject) => {
        fetch(url, {
            method: 'POST',
            headers: jsonCT,
            credentials: 'include',
            body: JSON.stringify({method,args,kwargs,"version":2})
        }).then(response => {
            if (response.status == 200) {
                response.json().then(res => {
                    if (!res.success) {
                        console.log(res.error + ": " + res.error_message);
                        reject(res.error);
                    } else {
                        resolve(res.result);
                    }
                });
            } else {
                reject(status);
            }                
        }).catch(error => reject(error));
    });
}


"""

def gen_api(api_methods, url):
    response = js_lib.replace("{{url}}", url)
    for name, conf in api_methods.items():
        response += gen_function(conf["method"], name, conf["details"]) + "\n"

    return response

