from inspect import signature
import json

def gen_function(func, name, ignore_details, legacy=False):
    args = []
    rest = ""
    for argument in signature(func).parameters.values():
        if argument.name == "details" and ignore_details:
            continue
        else:
            args.append(str(argument))
    args_str = ", ".join(args)
    if args:
        rest = ", " + args_str
    return "def "+name+"("+args_str+"): return _call_method('"+name+"'"+rest+")"


py_lib = """# 
# This code was generated by a tool.
#

import json
import urllib.request

class SimpleWebAPIError(Exception):
    def __init__(self, error_name="SimpleWebAPIError", message="An unknown error occured."):
        self.error_name = error_name
        self.message = message
    def __str__(self):
        return str(self.error_name) + ": " + str(self.message)

token = None
url = "{{url}}"

def _call_method(method, *args, **kwargs):
    call = {"method":method,
                "args":args,
                "kwargs":kwargs,
                "version":2}
    if (token != None):
        call["token"] = token
    request = urllib.request.Request(url,
            data=json.dumps(call).encode('utf8'),
            headers={"Content-Type":"application/json"},
            method="POST")
    result = json.loads(urllib.request.urlopen(request).read().decode('utf-8'))
    if not result["success"]:
        raise SimpleWebAPIError(message=result.get("error_message"), error_name=result.get("error"))
    return result["result"]


"""

def gen_api(api_methods, url):
    response = py_lib.replace("{{url}}", url)
    for name, conf in api_methods.items():
        response += gen_function(conf["method"], name, conf["details"]) + "\n"

    return response

